<?="<?php", PHP_EOL?>

namespace <?= $this->repositories_descriptor_namespace; ?>;

use <?= $this->entities_namespace?>\<?= $this->entity_name; ?>;
use Exception;

trait <?= $this->repository_descriptor_name . PHP_EOL; ?>
{
    protected $table = "<?= $this->table_name ?>";
    protected $database = "<?= $this->database ?>";
    protected $database_hash = "<?= $this->database_hash; ?>";
    protected $primary = "<?= $this->primary_key ?>";
    protected $relatedEntity = '<?= $this->entities_namespace."\\".$this->entity_name; ?>';
    protected $isView = <?=  ( ($this->is_view===true)? 'true':'false' ) ?>;
    protected $host = '<?= $this->host; ?>';
    protected $port = '<?= $this->port; ?>';

    protected $relations = [
        <?php foreach($this->relations as $k => $r): ?>"<?= $k; ?>" => [
            <?php foreach($r as $key => $value): ?>"<?= $key?>" => "<?= $value ?>",
            <?php endforeach;?>
        ],
        <?php endforeach;?>
    ];
    protected $tableColumnsDescription = [];

    protected function setTableColumnsDescription()
    {
        $this->tableColumnsDescription = [
            <?php foreach($this->properties as $property): ?>"<?= trim($property["Field"]) ?>" => [ "type" =>  "<?= $property["Type"] ?>", "orm_type" => "<?= $property["orm_type"]; ?>"],
            <?php endforeach; ?>
        ];
    }

    /**
    * Find by values
    *
    * @param string $name
    * @param string $value
    * @return <?= $this->entity_name; ?>[]
    * @throws Exception
    */
    public function findBy($name, $value)
    {
        return parent::findBy($name, $value);
    }

    /**
    * Get all
    *
    * @return <?= $this->entity_name; ?>[]
    * @throws Exception
    */
    public function findAll(): array
    {
        return parent::findAll();
    }

    /**
    * Find By key value pairs
    *
    * @param string[] $keyValues
    * @return <?= $this->entity_name; ?>[]
    * @throws Exception
    */
    public function findByValues(array $keyValues): array
    {
        return parent::findByValues($keyValues);
    }

    /**
    * Find by primary id
    *
    * @param int $id
    * @return <?= $this->entity_name . PHP_EOL; ?>
    * @throws Exception
    */
    public function findById($id): <?= $this->entity_name . PHP_EOL; ?>
    {
        return parent::findById($id);
    }
}
